#!/usr/bin/env python3
#
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
#
# (C) 2015 German Skalaukhov <keenser.sg@gmail.com>
# tftpd dynamic
#

import asyncio
import socket
import daemon
import daemon.pidfile
import lockfile
import pwd
import grp
import signal
import sys
import setproctitle
import logging
import logging.handlers
import io
import os
import jinja2
import re
import ipaddress
try:
    import py3tftp.protocols
    import py3tftp.file_io
except ImportError:
    sys.stderr.write("install py3tftp with 'pip3 install py3tftp'\n")
    sys.exit(1)

pkgversion = "1.4-4"
servicename = "tftpd-dynamic"
servicedesc = "tftpd server with dynamic file generation"

def getoptions():
    import argparse
    parser = argparse.ArgumentParser(
        description="{0} {1}".format(servicedesc, pkgversion))

    parser.add_argument("-v", "--verbose",
        dest="verbosity",
        action="count",
        help="print more diagnostic messages (option can be given multiple times)",
        default=0
    )

    parser.add_argument("-l", "--log",
        dest="logfile",
        nargs="?",
        help="log file, default: %(default)s, %(const)s if enabled",
        const="/var/log/{0}/{0}.log".format(servicename)
    )

    parser.add_argument("-s", "--syslog",
        dest="syslog",
        action="store_true",
        help="log to syslog (default off)",
        default=False
    )

    parser.add_argument("-p", "--pid",
        dest="pid",
        nargs="?",
        help="pid file, default: %(default)s, %(const)s if enabled",
        const="/var/run/{0}/{0}.pid".format(servicename)
    )

    parser.add_argument("-f", "--foreground",
        dest="foreground",
        action="store_true",
        help="stay in foreground (default: %(default)s)",
        default=False
    )

    group = parser.add_argument_group(
        "tftp server",
        "tftp server settings"
    )

    group.add_argument("--ip",
        dest="ip",
        help="ip address to bind to (default: INADDR_ANY)",
        default="::"
    )
    group.add_argument("--port",
        dest="port",
        type=int,
        help="local port to use (default: %(default)s)",
        default=69
    )
    group.add_argument(
        '--act-timeout',
        type=float,
        default=0.5,
        help="Timeout for each ACK of the lock-step (default: %(default)s)"
    )
    group.add_argument(
        '--timeout',
        type=float,
        default=3.0,
        help="timeout for packet retransmission (default: %(default)s)"
    )
    group.add_argument("--uid",
        dest="uid",
        help="run server on background with specific uid (default: %(default)s)",
        default=None
    )
    group.add_argument("--gid",
        dest="gid",
        help="run server on backgroupd with specific gid (default: %(default)s)",
        default=None
    )
    group.add_argument("-t", "--template",
        dest="template",
        help="templates path dir",
        default=None
    )
    group.add_argument("-r", "--root",
        dest="root",
        required=True,
        help="path to serve from"
    )

    return parser.parse_args()

CR = b'\x0d'
LF = b'\x0a'
CRLF = CR + LF
NUL = b'\x00'
CRNUL = CR + NUL
if isinstance(os.linesep, bytes):
    NL = os.linesep
else:
    NL = os.linesep.encode("ascii")

def _multiple_replace(adict):
    rx = re.compile(b'|'.join(map(re.escape, adict)))
    @staticmethod
    def _prototype(data):
        return rx.sub(lambda match: adict[match.group(0)], data)
    return _prototype

class NetasciiReader:
    from_netascii = _multiple_replace({CRLF: NL, CRNUL: CR})
    to_netascii = _multiple_replace({NL: CRLF, CR:CRNUL})

    def __init__(self, reader):
        self._reader = reader
        self._buffer = b''

    def read(self, size):
        buffer_size = 0
        if self._buffer:
            buffer_size = len(self._buffer)
        data = self._buffer + self.to_netascii(self._reader.read(size - buffer_size))
        self._buffer = data[size:]
        return data[:size]

    def write(self, data):
        if self._buffer:
            data = self._buffer + data
            self._buffer = b''
        if data[-1:] == CR:
            self._buffer = data[-1:]
            data = data[:-1]
        self._reader.write(self.from_netascii(data))

    def close(self):
        self._reader.close()

    @property
    def closed(self):
        return self._reader.closed

    def flush(self):
        self._reader.flush()

class FileWriter(py3tftp.file_io.FileWriter):
    def __init__(self, fname, chunk_size, mode):
        self.mode = mode
        super().__init__(py3tftp.file_io.sanitize_fname(fname), chunk_size)

    def _open_file(self):
        if self.mode == b'netascii':
            return NetasciiReader(open(self.fname, 'xb'))
        else:
            return open(self.fname, 'xb')

class FileReader(py3tftp.file_io.FileReader):
    def __init__(self, fname, chunk_size, mode):
        self.mode = mode
        super().__init__(fname, chunk_size)

    def _open_file(self):
        if self.mode == b'netascii':
            return NetasciiReader(open(self.fname, 'rb'))
        else:
            return open(self.fname, 'rb')

class FileNotFound():
    def __init__(self, fname, chunk_size):
        raise FileNotFoundError

class TemplateReader(FileReader):
    def __init__(self, fname, chunk_size, mode, env, addr):
        self.env = env
        self.filename = os.path.normpath(fname)
        ipaddr = ipaddress.ip_address(addr[0])
        self.addr = str(ipaddr) if ipaddr.version == 4 else ipaddr.ipv4_mapped
        self.port = addr[1]
        super().__init__(fname, chunk_size, mode)

    def _open_file(self):
        try:
            filename = self.filename.decode('UTF-8')
            template = self.env.get_template(filename)
            cfg = template.render({'file':filename, 'ip':self.addr, 'port':self.port})
            if self.mode == b'netascii':
                return NetasciiReader(io.BytesIO(cfg.encode('UTF-8')))
            else:
                return io.BytesIO(cfg.encode('UTF-8'))
        except jinja2.exceptions.TemplateNotFound:
            raise FileNotFoundError

class TFTPServerProtocol(py3tftp.protocols.TFTPServerProtocol):
    def __init__(self, loop, options):
        super().__init__(None, loop, None)
        self.env = jinja2.Environment(
            loader = jinja2.FileSystemLoader(options.template),
            trim_blocks = True, lstrip_blocks = True
        ) if options.template else None

    def datagram_received(self, data, remote_addr, local_addr):
        self.remote_addr = remote_addr
        self.host_interface = local_addr[0]
        try:
            super().datagram_received(data, remote_addr)
        except py3tftp.exceptions.BadRequest as e:
            logging.error("datagram_received %s", e)
            pkt = self.packet_factory.create_packet('ERR', code=4, msg='missing mode')
            self.transport.sendto(pkt.to_bytes(), self.remote_addr)

    def select_file_handler(self, packet):
        if packet.is_wrq():
            return lambda filename, opts: FileWriter(filename, opts, packet.mode)
        else:
            if os.path.exists(packet.fname):
                return lambda filename, opts: FileReader(filename, opts, packet.mode)
            elif self.env:
                return lambda filename, opts: TemplateReader(filename, opts, packet.mode, self.env, self.remote_addr)
            else:
                return FileNotFound

def create_raw_datagram_endpoint(loop, protocol_factory, local_addr=None, sock=None):
    max_size = 256 * 1024
    if sock is None:
        sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        sock.bind(local_addr)
    sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_RECVPKTINFO, 1)
    sock.setblocking(False)

    protocol = protocol_factory()
    protocol.connection_made(sock)

    def datagram_received():
        data, ancdata, msg_flags, _from = sock.recvmsg(max_size, socket.CMSG_LEN(max_size))
        addr = None
        for anc in ancdata:
            if anc[0] == socket.IPPROTO_IPV6 and anc[1] == socket.IPV6_PKTINFO:
                addr = ipaddress.ip_address(anc[2][:16])
                break
            elif anc[0] == socket.IPPROTO_IP and anc[1] == socket.IP_PKTINFO:
                addr = ipaddress.ip_address(anc[2][8:12])
                break
        _to = (str(addr), sock.getsockname()[1])
        protocol.datagram_received(data, _from, _to)

    loop.add_reader(sock.fileno(), datagram_received)
    return (sock, protocol)

def main():
    options = getoptions()

    setproctitle.setproctitle(servicename)

    try:
        with daemon.DaemonContext(
            pidfile = daemon.pidfile.PIDLockFile(options.pid) if options.pid else None,
            signal_map = {signal.SIGTERM: lambda signum, stack_frame: sys.exit(0)},
            detach_process = not options.foreground,
            stdout = sys.stdout if options.foreground else None,
            stderr = sys.stderr if options.foreground else None,
            uid = pwd.getpwnam(options.uid).pw_uid if options.uid else None,
            gid = grp.getgrnam(options.gid).gr_gid if options.gid else None,
            files_preserve = [3] if 'LISTEN_FDNAMES' in os.environ else None,
            working_directory = options.root,
            ) as context:
            daemonize(options)
    except lockfile.LockFailed as e:
        sys.stderr.write("daemonize error: {}'\n".format(e))

def daemonize(options):
    if options.verbosity > 3:
        options.verbosity = 3

    level = (
        logging.WARNING,
        logging.INFO,
        logging.DEBUG,
        logging.NOTSET,
        )[options.verbosity]

    logger = logging.getLogger('')
    logger.addHandler(logging.NullHandler())
    logger.setLevel(level)
    logformat = '%(asctime)s %(levelname)s:%(name)s: %(message)s'

    if options.logfile:
        filelogger = logging.handlers.WatchedFileHandler(options.logfile)
        filelogger.setFormatter(logging.Formatter(logformat))
        logger.addHandler(filelogger)

    if options.syslog:
        syslogger = logging.handlers.SysLogHandler(address = '/dev/log', facility = logging.handlers.SysLogHandler.LOG_LOCAL5)
        syslogger.setFormatter(logging.Formatter('%(name)s: %(message)s'))
        logger.addHandler(syslogger)

    if options.foreground:
        conslogger = logging.StreamHandler()
        conslogger.setFormatter(logging.Formatter(logformat))
        logger.addHandler(conslogger)

    sys.excepthook = lambda excType, excValue, traceback: logging.getLogger('exception').error("Uncaught exception", exc_info=(excType, excValue, traceback))

    log = logging.getLogger(servicename)

    log.info("starting %s version %s", servicename, pkgversion)

    loop = asyncio.get_event_loop()

    sock = socket.fromfd(3, socket.AF_INET6, socket.SOCK_DGRAM) if 'LISTEN_FDNAMES' in os.environ else None

    transport, protocol = create_raw_datagram_endpoint(loop, 
            lambda: TFTPServerProtocol(loop, options),
            local_addr = (options.ip, options.port,) if sock is None else None,
            sock = sock)

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        log.info('Received signal, shutting down')
    finally:
        transport.close()
        loop.close()
        log.info('stop')

if __name__ == '__main__':
    main()
